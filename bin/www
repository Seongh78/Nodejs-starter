#!/usr/bin/env node
require('dotenv').config();

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('nodejsstarter:server');
const http = require('http');
const cpus = require('os').cpus().length;
const cluster = require('cluster');
// console.log('cpus : ', cpus);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '80');
// const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
if (cluster.isMaster) {
	// console.log(`Master process ID : ${process.pid}`);
	// CPU 개수만큼 워커생산
	for (let i = 0; i < cpus; i += 1) {
		cluster.fork();
	}
	// 워커 종료 시
	cluster.on('exit', (worker, code, signal) => {
		console.log(`${worker.process.pid}번 워커 종료`);
		cluster.fork(); // 워커 재실행
	});
} else {
	/**
   * Listen on provided port, on all network interfaces.
   */
	// console.log(`${process.pid} 실행`);

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
